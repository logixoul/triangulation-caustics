#if 0
	void renderComplexImg(Array2D<Complexf> in) {
		Array2D<vec3> colored(in.Size());
		forxy(in) {
			vec2 vec2(in(p).real(), in(p).imag());
			colored(p) = complexToColor_HSV(vec2)/* * 10000.0f*/;
		}
		::texToDraw = gtex(colored);
		::texOverride = true;
	}
	void printMinMax(string desc, Array2D<Complexf> in) {
		auto lengths = Array2D<float>(in.Size());
		forxy(in) {
			lengths(p) = abs(in(p));
		}
		printMinMax(desc, lengths);
	}
	void printMinMax(string desc, Array2D<float> arr) {
		auto maxEl = *std::max_element(arr.begin(), arr.end());
		auto minEl = *std::min_element(arr.begin(), arr.end());
		qDebug() << "array '" << desc << "': min=" << minEl << ", max=" << maxEl;
	}
	Array2D<Complexf> getFdKernel(ivec2 size) {
		Array2D<float> sdKernel(size);
		forxy(sdKernel) {
			auto p2=p;if(p2.x>sdKernel.w/2)p2.x-=sdKernel.w;if(p2.y>sdKernel.h/2)p2.y-=sdKernel.h;
			//sdKernel(p) = 1.0 / (.01f + (p2-ivec2(3, 3)).length()/10.0f);
			//sdKernel(p) = 1.0 / (1.f + p2.length()/10.0f);
			float dist = p2.length();
			//sdKernel(p) = powf(max(1.0f - p2.length() / 20.0f, 0.0f), 4.0);
			//sdKernel(p) = 1.0 / pow((1.f + dist*5.0f), 3.0f);
			sdKernel(p) = p2.length() > 10 ? 0 : 1;
			//sdKernel(p) = expf(-p2.lengthSquared()*.02f);
			//if(p == ivec2::zero()) sdKernel(p) = 1.0f;
			//else sdKernel(p) = 0.0f;
		}
		auto kernelInvSum = 1.0/(std::accumulate(sdKernel.begin(), sdKernel.end(), 0.0f));
		forxy(sdKernel) { sdKernel(p) *= kernelInvSum; }
		auto fdKernel = fft(sdKernel, FFTW_MEASURE);
		return fdKernel;
	}
	Array2D<vec3> convolveLongtail(Array2D<vec3> in) {
		/*static*/ Array2D<Complexf> fdKernel = getFdKernel(in.Size());
		auto inChans = ::split(in);
		for(int i = 0; i < inChans.size(); i++) {
			auto& inChan = inChans[i];
			auto inChanFd = fft(inChan, FFTW_MEASURE);
			//renderComplexImg(inChanFd);
			forxy(inChanFd) {
				auto p2=p;if(p2.x>in.w/2)p2.x-=in.w;if(p2.y>in.h/2)p2.y-=in.h;
				inChanFd(p) *= fdKernel(p);
				//if(p != vec2::zero())
				//	inChanFd(p) /= 10.0f + sqrt(p2.length());
				//inChanFd(p) *= .1f;
				//inChanFd(p) *= expf(-.01*p2.lengthSquared());
				//if(p2.length() > 10)
				//	inChanFd(p) *= 0.0f;
			}
			//renderComplexImg(fdKernel);
			inChan = ifft(inChanFd, FFTW_MEASURE);
		}
		return ::merge(inChans);
	}
	void renderIt() {
		static Array2D<float> sizeSource(sx, sy);
		static auto sizeSourceTex = gtex(sizeSource);
		static auto walkerTex = Shade().tex(sizeSourceTex).expr("vec3(0.0);").run();
		if(!pause) {
			walkerTex = Shade().tex(walkerTex).expr("fetch3()*.99;").run();
			glPushAttrib(GL_ALL_ATTRIB_BITS);
			glUseProgram(0);
			glPointSize(2);
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
			glEnable(GL_BLEND);
			{
				beginRTT(walkerTex);
				{
					gl::pushMatrices();
					gl::setMatricesWindow(sx, sy, true);
					{
						glBegin(GL_POINTS);
						{
							foreach(Walker& walker, walkers) {
								auto& c = walker.color;
								glColor4f(c.x, c.y, c.z, walker.alpha());
								glVertex2f(walker.pos);
							}
						}
						glEnd();
					}
					gl::popMatrices();
				}
				endRTT();
			}
			glPopAttrib();
		}

		auto walkerImg = gettexdata<vec3>(walkerTex, GL_RGB, GL_FLOAT, walkerTex.getCleanBounds());
		walkerImg = convolveLongtail(walkerImg);
		auto walkerTex2 = gtex(walkerImg);

		//walkerTex = gpuBlur2_4::run_longtail(walkerTex, 3, 1.0);
		auto walkerTex3 = shade2(walkerTex, walkerTex2, "_out = tc.x > .5 ? fetch3() : fetch3(tex2) * 600.0;");

		if(::texOverride) {
			gl::draw(texToDraw, getWindowBounds());
		} else {
			gl::draw(walkerTex3, getWindowBounds());
		}
	}
